name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  GO_VERSION: '1.23'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Install swag for Swagger generation
      run: go install github.com/swaggo/swag/cmd/swag@latest

    - name: Generate Swagger docs
      run: swag init -g internal/controller/http/controller.go -o docs

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m --out-format=colored-line-number

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: secret_password
          POSTGRES_USER: spy_cats
          POSTGRES_DB: spy_cats
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Install swag for Swagger generation
      run: go install github.com/swaggo/swag/cmd/swag@latest

    - name: Generate Swagger docs
      run: swag init -g internal/controller/http/controller.go -o docs

    - name: Run unit tests
      env:
        PG_URL: postgres://spy_cats:secret_password@localhost:5432/spy_cats?sslmode=disable
        APP_NAME: spy-cats-api
        APP_VERSION: test
        HTTP_PORT: 8080
        LOG_LEVEL: info
        SWAGGER_ENABLED: true
        JWT_SECRET: test-secret-key-for-ci-tests-at-least-32-characters
        JWT_ACCESS_TOKEN_TTL: 900
        JWT_REFRESH_TOKEN_TTL: 604800
        JWT_SIGNING_ALGORITHM: HS256
        CACHE_TYPE: memory
        REDIS_URL: redis://localhost:6379
        REDIS_PASSWORD: ""
        REDIS_DB: 0
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Run integration tests
      env:
        PG_URL: postgres://spy_cats:secret_password@localhost:5432/spy_cats?sslmode=disable
        APP_NAME: spy-cats-api
        APP_VERSION: test
        HTTP_PORT: 8080
        LOG_LEVEL: info
        SWAGGER_ENABLED: true
        JWT_SECRET: test-secret-key-for-ci-tests-at-least-32-characters
        JWT_ACCESS_TOKEN_TTL: 900
        JWT_REFRESH_TOKEN_TTL: 604800
        JWT_SIGNING_ALGORITHM: HS256
        CACHE_TYPE: memory
        REDIS_URL: redis://localhost:6379
        REDIS_PASSWORD: ""
        REDIS_DB: 0
      run: |
        go test -v -tags=integration ./tests/integration/

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Install swag for Swagger generation
      run: go install github.com/swaggo/swag/cmd/swag@latest

    - name: Generate Swagger docs
      run: swag init -g internal/controller/http/controller.go -o docs

    - name: Build application
      run: |
        mkdir -p bin
        CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o bin/app cmd/main.go

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: spy-cats-binary
        path: bin/app

  docker-test:
    name: Docker Compose Test
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install swag for Swagger generation
      run: |
        go install github.com/swaggo/swag/cmd/swag@latest
        export PATH=$PATH:$(go env GOPATH)/bin
        swag init -g internal/controller/http/controller.go -o docs

    - name: Create SSL certificates
      run: |
        mkdir -p ssl
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
          -keyout ssl/nginx.key -out ssl/nginx.crt \
          -subj "/C=US/ST=State/L=City/O=Organization/CN=localhost"

    - name: Validate Docker Compose configurations
      run: |
        echo "Validating Docker Compose configurations..."
        docker compose -f docker-compose.yml config
        docker compose -f docker-compose.lite.yml config
        docker compose -f docker-compose.prod.yml config
        echo "All Docker Compose configurations are valid!"

    - name: Test Docker Compose (Full Stack)
      run: |
        echo "Checking environment setup..."
        if [ -f .env ]; then
          echo ".env file exists:"
          cat .env
        else
          echo "No .env file found (using defaults)"
        fi

        echo "Testing if app can build..."
        go build -o test-app ./cmd/main.go || echo "Go build failed"
        rm -f test-app

        echo "Starting Docker Compose..."
        docker compose up -d --build
        echo "Waiting for full stack services to be ready..."
        sleep 60
        echo "Checking container status..."
        docker compose ps
        echo "Checking container logs..."
        docker compose logs app
        echo "Checking nginx logs..."
        docker compose logs nginx
        echo "Checking all container logs for errors..."
        docker compose logs
        echo "Inspecting app container..."
        docker inspect spy-cats-api || echo "Container inspect failed"
        echo "Checking network connectivity..."
        netstat -tlnp | grep :8080 || echo "Port 8080 not listening"
        netstat -tlnp | grep :443 || echo "Port 443 not listening"
        echo "Waiting for API to be ready (direct access)..."
        for i in {1..30}; do
          if curl -f http://localhost:8080/health; then
            echo "API is ready!"
            break
          fi
          echo "Attempt $i: API not ready yet, waiting 5 seconds..."
          sleep 5
        done
        echo "Testing API endpoints..."
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost:8080/swagger/index.html || exit 1
        echo "API tests passed!"

        echo "Testing Nginx proxy (optional)..."
        if curl -k -f https://localhost/health 2>/dev/null; then
          echo "HTTPS proxy is working!"
          curl -k -f https://localhost/swagger/index.html || echo "Swagger via HTTPS failed"
        else
          echo "HTTPS proxy not available (this is OK for CI)"
        fi

        docker compose down

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Go Security Checker
      run: |
        # Use go vet for basic security checks
        go vet ./...

        # Check for common security issues
        echo "Running basic security checks..."

        # Check for hardcoded credentials (basic check)
        if grep -r "password.*=" --include="*.go" . | grep -v "_test.go" | grep -v "Password.*string"; then
          echo "Warning: Potential hardcoded passwords found"
        fi

        # Check for SQL injection patterns
        if grep -r "fmt.Sprintf.*SELECT\|fmt.Sprintf.*INSERT\|fmt.Sprintf.*UPDATE\|fmt.Sprintf.*DELETE" --include="*.go" .; then
          echo "Warning: Potential SQL injection patterns found"
        fi

        echo "Basic security checks completed"
      continue-on-error: true

    - name: Run Nancy for dependency vulnerability scanning
      run: |
        # Install nancy for dependency scanning
        go install github.com/sonatypecommunity/nancy@latest || echo "Nancy installation failed"

        # Run nancy if available
        if command -v nancy >/dev/null 2>&1; then
          go list -json -deps ./... | nancy sleuth || echo "Nancy scan completed with warnings"
        else
          echo "Nancy not available, skipping dependency scan"
        fi
      continue-on-error: true

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test, docker-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install swag for Swagger generation
      run: |
        go install github.com/swaggo/swag/cmd/swag@latest
        export PATH=$PATH:$(go env GOPATH)/bin
        swag init -g internal/controller/http/controller.go -o docs

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/spy-cats-api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # For example, using kubectl, docker-compose, or other deployment tools
