services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spy-cats-api-lite
    ports:
      - "8080:8080"
    environment:
      - APP_NAME=${APP_NAME}
      - APP_VERSION=${APP_VERSION}
      - HTTP_PORT=${HTTP_PORT}
      - LOG_LEVEL=${LOG_LEVEL}
      - PG_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
      - PG_POOL_MAX=${PG_POOL_MAX}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ACCESS_TOKEN_TTL=${JWT_ACCESS_TOKEN_TTL}
      - JWT_REFRESH_TOKEN_TTL=${JWT_REFRESH_TOKEN_TTL}
      - JWT_SIGNING_ALGORITHM=${JWT_SIGNING_ALGORITHM}
      - SWAGGER_ENABLED=${SWAGGER_ENABLED}
      - CACHE_TYPE=${CACHE_TYPE}
      - REDIS_URL=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - spy-cats-network

  postgres:
    image: postgres:15-alpine
    container_name: spy-cats-db-lite
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - spy-cats-network

  redis:
    image: redis:7-alpine
    container_name: spy-cats-redis-lite
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - spy-cats-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  spy-cats-network:
    driver: bridge
