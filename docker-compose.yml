services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${APP_NAME:-spy-cats-api}
    restart: unless-stopped
    ports:
      - "8080:${HTTP_PORT:-8080}"
    environment:
      - APP_NAME=${APP_NAME:-spy-cats-api}
      - APP_VERSION=${APP_VERSION:-1.0.0}
      - HTTP_PORT=${HTTP_PORT:-8080}
      - HTTP_USE_PREFORK_MODE=${HTTP_USE_PREFORK_MODE:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PG_POOL_MAX=${PG_POOL_MAX:-10}
      - PG_URL=${PG_URL:-postgres://spy_cats:spy_cats_password@postgres:5432/spy_cats?sslmode=disable}
      - SWAGGER_ENABLED=${SWAGGER_ENABLED:-true}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - JWT_SIGNING_ALGORITHM=${JWT_SIGNING_ALGORITHM:-HS256}
      - JWT_ACCESS_TOKEN_TTL=${JWT_ACCESS_TOKEN_TTL:-15m}
      - JWT_REFRESH_TOKEN_TTL=${JWT_REFRESH_TOKEN_TTL:-7d}
      - CACHE_TYPE=${CACHE_TYPE:-redis}
      - REDIS_URL=${REDIS_URL:-redis:6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${REDIS_DB:-0}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "-c", "nc -z localhost 8080 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    container_name: spy-cats-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-spy_cats}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-spy_cats_password}
      - POSTGRES_DB=${POSTGRES_DB:-spy_cats}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spy_cats -d spy_cats"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: spy-cats-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  ssl-init:
    image: alpine:latest
    container_name: spy-cats-ssl-init
    volumes:
      - ./ssl:/ssl
    command: |
      sh -c "
        if [ ! -f /ssl/nginx.crt ] || [ ! -f /ssl/nginx.key ]; then
          echo 'Generating SSL certificates...'
          apk add --no-cache openssl
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout /ssl/nginx.key -out /ssl/nginx.crt \
            -subj '/C=US/ST=State/L=City/O=Organization/CN=localhost'
          chmod 644 /ssl/nginx.crt
          chmod 600 /ssl/nginx.key
          echo 'SSL certificates generated successfully'
        else
          echo 'SSL certificates already exist'
        fi
      "

  nginx:
    image: nginx:alpine
    container_name: spy-cats-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      ssl-init:
        condition: service_completed_successfully
      app:
        condition: service_healthy
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
