services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${APP_NAME}
    restart: unless-stopped
    ports:
      - "8080:${HTTP_PORT}"
    environment:
      - APP_NAME=${APP_NAME}
      - APP_VERSION=${APP_VERSION}
      - HTTP_PORT=${HTTP_PORT}
      - HTTP_USE_PREFORK_MODE=${HTTP_USE_PREFORK_MODE}
      - LOG_LEVEL=${LOG_LEVEL}
      - PG_POOL_MAX=${PG_POOL_MAX}
      - PG_URL=${PG_URL}
      - SWAGGER_ENABLED=${SWAGGER_ENABLED}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_SIGNING_ALGORITHM=${JWT_SIGNING_ALGORITHM}
      - JWT_ACCESS_TOKEN_TTL=${JWT_ACCESS_TOKEN_TTL}
      - JWT_REFRESH_TOKEN_TTL=${JWT_REFRESH_TOKEN_TTL}
      - CACHE_TYPE=${CACHE_TYPE}
      - REDIS_URL=${REDIS_URL}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB}
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    container_name: spy-cats-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spy_cats -d spy_cats"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: spy-cats-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  nginx:
    image: nginx:alpine
    container_name: spy-cats-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
