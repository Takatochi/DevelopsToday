services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spy-cats-api-prod
    restart: unless-stopped
    environment:
      - APP_NAME=${APP_NAME:-spy-cats-api}
      - APP_VERSION=${APP_VERSION:-1.0.0}
      - HTTP_PORT=${HTTP_PORT:-8080}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - SWAGGER_ENABLED=${SWAGGER_ENABLED:-true}
      - PG_URL=${PG_URL:-postgres://spy_cats:spy_cats_password@postgres:5432/spy_cats?sslmode=disable}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-at-least-32-characters-long}
      - JWT_ACCESS_TOKEN_TTL=${JWT_ACCESS_TOKEN_TTL:-900}
      - JWT_REFRESH_TOKEN_TTL=${JWT_REFRESH_TOKEN_TTL:-604800}
      - JWT_SIGNING_ALGORITHM=${JWT_SIGNING_ALGORITHM:-HS256}
      - CACHE_TYPE=${CACHE_TYPE:-redis}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${REDIS_DB:-0}
      - GIN_MODE=release
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: spy-cats-db-prod
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-spy_cats}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-spy_cats_password}
      - POSTGRES_DB=${POSTGRES_DB:-spy_cats}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spy_cats -d spy_cats"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  nginx:
    image: nginx:alpine
    container_name: spy-cats-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: spy-cats-redis-prod
    restart: unless-stopped
    command: >
      sh -c "
      if [ -n \"$$REDIS_PASSWORD\" ]; then
        redis-server --appendonly yes --requirepass \"$$REDIS_PASSWORD\"
      else
        redis-server --appendonly yes
      fi
      "
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: >
        sh -c "
        if [ -n \"$$REDIS_PASSWORD\" ]; then
          redis-cli -a \"$$REDIS_PASSWORD\" ping
        else
          redis-cli ping
        fi
        "
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
