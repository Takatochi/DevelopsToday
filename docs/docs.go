// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticate user with username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Revoke user's refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current authenticated user information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get current user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Get new access token using refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RefreshRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.TokenPair"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user with username, email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Registration data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/bulk/cats": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create multiple cats in parallel using worker pool",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bulk"
                ],
                "summary": "Bulk create cats",
                "parameters": [
                    {
                        "description": "Bulk cat creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/bulk.BulkCreateCatsRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/services.BulkResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/bulk/cats/salary": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update multiple cat salaries in parallel using worker pool",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bulk"
                ],
                "summary": "Bulk update cat salaries",
                "parameters": [
                    {
                        "description": "Bulk salary update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/bulk.BulkSalaryUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.BulkResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/cats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of all cats",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cats"
                ],
                "summary": "List all cats",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Cat"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new cat in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cats"
                ],
                "summary": "Create a new cat",
                "parameters": [
                    {
                        "description": "Cat info",
                        "name": "cat",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Cat"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Cat"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/cats/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get cat details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cats"
                ],
                "summary": "Get cat by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Cat"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete cat by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cats"
                ],
                "summary": "Delete cat",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/cats/{id}/salary": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update salary for a specific cat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cats"
                ],
                "summary": "Update cat salary",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New salary",
                        "name": "salary",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Cat"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/missions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all missions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "missions"
                ],
                "summary": "List all missions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Mission"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new mission with 1-3 targets",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "missions"
                ],
                "summary": "Create a new mission",
                "parameters": [
                    {
                        "description": "Mission targets",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mission.CreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Mission"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/missions/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get mission details by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "missions"
                ],
                "summary": "Get mission by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Mission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Mission"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete mission if it has no assigned cat",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "missions"
                ],
                "summary": "Delete mission",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Mission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/missions/{id}/assign": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Assign a cat to complete the mission",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "missions"
                ],
                "summary": "Assign cat to mission",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Mission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Cat info",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mission.AssignCatRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Mission"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/missions/{id}/complete": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mark mission as complete if all targets are completed",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "missions"
                ],
                "summary": "Mark mission as complete",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Mission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Mission"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/missions/{id}/targets": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a new target to an existing mission",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "targets"
                ],
                "summary": "Add target to mission",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Mission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Target info",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Target"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Target"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/missions/{id}/targets/{tid}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a target from mission",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "targets"
                ],
                "summary": "Delete target",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Mission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Target ID",
                        "name": "tid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/missions/{id}/targets/{tid}/complete": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mark a specific target as completed",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "targets"
                ],
                "summary": "Mark target as complete",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Mission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Target ID",
                        "name": "tid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Target"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/missions/{id}/targets/{tid}/notes": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update notes for a specific target",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "targets"
                ],
                "summary": "Update target notes",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Mission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Target ID",
                        "name": "tid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Target notes",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/target.UpdateNotesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Target"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/stats/dashboard": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get comprehensive dashboard statistics including cats, missions, and targets data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stats"
                ],
                "summary": "Get dashboard statistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.DashboardStats"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "bulk.BulkCreateCatsRequest": {
            "type": "object",
            "required": [
                "cats"
            ],
            "properties": {
                "cats": {
                    "type": "array",
                    "maxItems": 50,
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/models.Cat"
                    }
                }
            }
        },
        "bulk.BulkSalaryUpdateRequest": {
            "type": "object",
            "required": [
                "updates"
            ],
            "properties": {
                "updates": {
                    "type": "array",
                    "maxItems": 100,
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/services.SalaryUpdate"
                    }
                }
            }
        },
        "dto.AuthResponse": {
            "description": "Authentication response with user data and tokens",
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "JWT access token for API authentication\n@example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "refresh_token": {
                    "description": "JWT refresh token for obtaining new access tokens\n@example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "user": {
                    "description": "User information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    ]
                }
            }
        },
        "dto.ErrorResponse": {
            "description": "Error response structure",
            "type": "object",
            "properties": {
                "code": {
                    "description": "Error code (optional)\n@example \"VALIDATION_ERROR\"",
                    "type": "string",
                    "example": "VALIDATION_ERROR"
                },
                "details": {
                    "description": "Additional error details (optional)\n@example {\"field\": \"username\", \"message\": \"Username is required\"}"
                },
                "error": {
                    "description": "Error message\n@example \"Invalid request parameters\"",
                    "type": "string",
                    "example": "Invalid request parameters"
                }
            }
        },
        "dto.LoginRequest": {
            "description": "User login request",
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "description": "Password for authentication\n@example \"securepassword123\"",
                    "type": "string",
                    "example": "securepassword123"
                },
                "username": {
                    "description": "Username or email for authentication\n@example \"john_doe\"",
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "dto.RefreshRequest": {
            "description": "Refresh token request",
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "description": "Refresh token to obtain new access token\n@example \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "dto.RegisterRequest": {
            "description": "User registration request",
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "description": "Email address for the new user account\n@example \"john.doe@example.com\"",
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "password": {
                    "description": "Password for the new user account (minimum 6 characters)\n@example \"securepassword123\"",
                    "type": "string",
                    "minLength": 6,
                    "example": "securepassword123"
                },
                "role": {
                    "description": "Role for the user (optional, defaults to \"spy\")\n@example \"spy\"",
                    "type": "string",
                    "example": "spy"
                },
                "username": {
                    "description": "Username for the new user account\n@example \"john_doe\"",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3,
                    "example": "john_doe"
                }
            }
        },
        "dto.UserResponse": {
            "description": "User information in API responses",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Account creation timestamp\n@example \"2023-12-01T10:00:00Z\"",
                    "type": "string",
                    "example": "2023-12-01T10:00:00Z"
                },
                "email": {
                    "description": "Email address of the user\n@example \"john.doe@example.com\"",
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "id": {
                    "description": "Unique user identifier\n@example 1",
                    "type": "integer",
                    "example": 1
                },
                "role": {
                    "description": "Role of the user\n@example \"spy\"",
                    "type": "string",
                    "example": "spy"
                },
                "updated_at": {
                    "description": "Last update timestamp\n@example \"2023-12-01T10:00:00Z\"",
                    "type": "string",
                    "example": "2023-12-01T10:00:00Z"
                },
                "username": {
                    "description": "Username of the user\n@example \"john_doe\"",
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "mission.AssignCatRequest": {
            "type": "object",
            "required": [
                "cat_id"
            ],
            "properties": {
                "cat_id": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "mission.CreateRequest": {
            "type": "object",
            "required": [
                "targets"
            ],
            "properties": {
                "targets": {
                    "type": "array",
                    "maxItems": 3,
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/models.Target"
                    }
                }
            }
        },
        "models.Cat": {
            "description": "Cat entity",
            "type": "object",
            "required": [
                "breed",
                "name"
            ],
            "properties": {
                "breed": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "example": "Bengal"
                },
                "experience": {
                    "type": "integer",
                    "maximum": 50,
                    "minimum": 0,
                    "example": 5
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "example": "Whiskers"
                },
                "salary": {
                    "type": "number",
                    "minimum": 0,
                    "example": 1000.5
                }
            }
        },
        "models.Mission": {
            "description": "Mission entity with assigned targets and cat",
            "type": "object",
            "properties": {
                "cat_id": {
                    "type": "integer"
                },
                "complete": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Target"
                    }
                }
            }
        },
        "models.Target": {
            "description": "Target entity that needs to be completed",
            "type": "object",
            "required": [
                "country",
                "name",
                "notes"
            ],
            "properties": {
                "complete": {
                    "type": "boolean",
                    "example": false
                },
                "country": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "example": "Ukraine"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "example": "John Doe"
                },
                "notes": {
                    "type": "string",
                    "maxLength": 500,
                    "minLength": 1,
                    "example": "Target usually visits gym at 6 PM"
                }
            }
        },
        "services.BulkResult": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "failed": {
                    "type": "integer"
                },
                "successful": {
                    "type": "integer"
                }
            }
        },
        "services.DashboardStats": {
            "type": "object",
            "properties": {
                "active_missions": {
                    "type": "integer"
                },
                "average_salary": {
                    "type": "number"
                },
                "completed_missions": {
                    "type": "integer"
                },
                "completed_targets": {
                    "type": "integer"
                },
                "total_cats": {
                    "type": "integer"
                },
                "total_missions": {
                    "type": "integer"
                },
                "total_targets": {
                    "type": "integer"
                }
            }
        },
        "services.SalaryUpdate": {
            "type": "object",
            "required": [
                "id",
                "salary"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "salary": {
                    "type": "number",
                    "minimum": 0
                }
            }
        },
        "services.TokenPair": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "target.UpdateNotesRequest": {
            "type": "object",
            "required": [
                "notes"
            ],
            "properties": {
                "notes": {
                    "type": "string",
                    "maxLength": 500,
                    "minLength": 1,
                    "example": "Target usually visits gym at 6 PM"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "Spy Cat Agency API",
	Description:      "REST API for managing spy cats, missions, and targets with JWT authentication",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
