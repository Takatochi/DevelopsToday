basePath: /v1
definitions:
  bulk.BulkCreateCatsRequest:
    properties:
      cats:
        items:
          $ref: '#/definitions/models.Cat'
        maxItems: 50
        minItems: 1
        type: array
    required:
    - cats
    type: object
  bulk.BulkSalaryUpdateRequest:
    properties:
      updates:
        items:
          $ref: '#/definitions/services.SalaryUpdate'
        maxItems: 100
        minItems: 1
        type: array
    required:
    - updates
    type: object
  dto.AuthResponse:
    description: Authentication response with user data and tokens
    properties:
      access_token:
        description: |-
          JWT access token for API authentication
          @example "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      refresh_token:
        description: |-
          JWT refresh token for obtaining new access tokens
          @example "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        allOf:
        - $ref: '#/definitions/dto.UserResponse'
        description: User information
    type: object
  dto.ErrorResponse:
    description: Error response structure
    properties:
      code:
        description: |-
          Error code (optional)
          @example "VALIDATION_ERROR"
        example: VALIDATION_ERROR
        type: string
      details:
        description: |-
          Additional error details (optional)
          @example {"field": "username", "message": "Username is required"}
      error:
        description: |-
          Error message
          @example "Invalid request parameters"
        example: Invalid request parameters
        type: string
    type: object
  dto.LoginRequest:
    description: User login request
    properties:
      password:
        description: |-
          Password for authentication
          @example "securepassword123"
        example: securepassword123
        type: string
      username:
        description: |-
          Username or email for authentication
          @example "john_doe"
        example: john_doe
        type: string
    required:
    - password
    - username
    type: object
  dto.RefreshRequest:
    description: Refresh token request
    properties:
      refresh_token:
        description: |-
          Refresh token to obtain new access token
          @example "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  dto.RegisterRequest:
    description: User registration request
    properties:
      email:
        description: |-
          Email address for the new user account
          @example "john.doe@example.com"
        example: john.doe@example.com
        type: string
      password:
        description: |-
          Password for the new user account (minimum 6 characters)
          @example "securepassword123"
        example: securepassword123
        minLength: 6
        type: string
      role:
        description: |-
          Role for the user (optional, defaults to "spy")
          @example "spy"
        example: spy
        type: string
      username:
        description: |-
          Username for the new user account
          @example "john_doe"
        example: john_doe
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.UserResponse:
    description: User information in API responses
    properties:
      created_at:
        description: |-
          Account creation timestamp
          @example "2023-12-01T10:00:00Z"
        example: "2023-12-01T10:00:00Z"
        type: string
      email:
        description: |-
          Email address of the user
          @example "john.doe@example.com"
        example: john.doe@example.com
        type: string
      id:
        description: |-
          Unique user identifier
          @example 1
        example: 1
        type: integer
      role:
        description: |-
          Role of the user
          @example "spy"
        example: spy
        type: string
      updated_at:
        description: |-
          Last update timestamp
          @example "2023-12-01T10:00:00Z"
        example: "2023-12-01T10:00:00Z"
        type: string
      username:
        description: |-
          Username of the user
          @example "john_doe"
        example: john_doe
        type: string
    type: object
  mission.AssignCatRequest:
    properties:
      cat_id:
        minimum: 1
        type: integer
    required:
    - cat_id
    type: object
  mission.CreateRequest:
    properties:
      targets:
        items:
          $ref: '#/definitions/models.Target'
        maxItems: 3
        minItems: 1
        type: array
    required:
    - targets
    type: object
  models.Cat:
    description: Cat entity
    properties:
      breed:
        example: Bengal
        maxLength: 50
        minLength: 1
        type: string
      experience:
        example: 5
        maximum: 50
        minimum: 0
        type: integer
      id:
        example: 1
        type: integer
      name:
        example: Whiskers
        maxLength: 100
        minLength: 1
        type: string
      salary:
        example: 1000.5
        minimum: 0
        type: number
    required:
    - breed
    - name
    type: object
  models.Mission:
    description: Mission entity with assigned targets and cat
    properties:
      cat_id:
        type: integer
      complete:
        type: boolean
      id:
        type: integer
      targets:
        items:
          $ref: '#/definitions/models.Target'
        type: array
    type: object
  models.Target:
    description: Target entity that needs to be completed
    properties:
      complete:
        example: false
        type: boolean
      country:
        example: Ukraine
        maxLength: 50
        minLength: 1
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John Doe
        maxLength: 100
        minLength: 1
        type: string
      notes:
        example: Target usually visits gym at 6 PM
        maxLength: 500
        minLength: 1
        type: string
    required:
    - country
    - name
    - notes
    type: object
  services.BulkResult:
    properties:
      errors:
        items:
          type: string
        type: array
      failed:
        type: integer
      successful:
        type: integer
    type: object
  services.DashboardStats:
    properties:
      active_missions:
        type: integer
      average_salary:
        type: number
      completed_missions:
        type: integer
      completed_targets:
        type: integer
      total_cats:
        type: integer
      total_missions:
        type: integer
      total_targets:
        type: integer
    type: object
  services.SalaryUpdate:
    properties:
      id:
        type: integer
      salary:
        minimum: 0
        type: number
    required:
    - id
    - salary
    type: object
  services.TokenPair:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  target.UpdateNotesRequest:
    properties:
      notes:
        example: Target usually visits gym at 6 PM
        maxLength: 500
        minLength: 1
        type: string
    required:
    - notes
    type: object
host: localhost:8080
info:
  contact: {}
  description: REST API for managing spy cats, missions, and targets with JWT authentication
  title: Spy Cat Agency API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with username and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Revoke user's refresh token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - auth
  /auth/me:
    get:
      description: Get current authenticated user information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get new access token using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.TokenPair'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with username, email and password
      parameters:
      - description: Registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - auth
  /bulk/cats:
    post:
      consumes:
      - application/json
      description: Create multiple cats in parallel using worker pool
      parameters:
      - description: Bulk cat creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/bulk.BulkCreateCatsRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/services.BulkResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Bulk create cats
      tags:
      - bulk
  /bulk/cats/salary:
    put:
      consumes:
      - application/json
      description: Update multiple cat salaries in parallel using worker pool
      parameters:
      - description: Bulk salary update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/bulk.BulkSalaryUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.BulkResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Bulk update cat salaries
      tags:
      - bulk
  /cats:
    get:
      description: Get list of all cats
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Cat'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List all cats
      tags:
      - cats
    post:
      consumes:
      - application/json
      description: Create a new cat in the system
      parameters:
      - description: Cat info
        in: body
        name: cat
        required: true
        schema:
          $ref: '#/definitions/models.Cat'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Cat'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new cat
      tags:
      - cats
  /cats/{id}:
    delete:
      description: Delete cat by ID
      parameters:
      - description: Cat ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete cat
      tags:
      - cats
    get:
      description: Get cat details by ID
      parameters:
      - description: Cat ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Cat'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get cat by ID
      tags:
      - cats
  /cats/{id}/salary:
    patch:
      consumes:
      - application/json
      description: Update salary for a specific cat
      parameters:
      - description: Cat ID
        in: path
        name: id
        required: true
        type: integer
      - description: New salary
        in: body
        name: salary
        required: true
        schema:
          type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Cat'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update cat salary
      tags:
      - cats
  /missions:
    get:
      description: Get all missions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Mission'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List all missions
      tags:
      - missions
    post:
      consumes:
      - application/json
      description: Create a new mission with 1-3 targets
      parameters:
      - description: Mission targets
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/mission.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Mission'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new mission
      tags:
      - missions
  /missions/{id}:
    delete:
      description: Delete mission if it has no assigned cat
      parameters:
      - description: Mission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete mission
      tags:
      - missions
    get:
      description: Get mission details by ID
      parameters:
      - description: Mission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Mission'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get mission by ID
      tags:
      - missions
  /missions/{id}/assign:
    post:
      consumes:
      - application/json
      description: Assign a cat to complete the mission
      parameters:
      - description: Mission ID
        in: path
        name: id
        required: true
        type: integer
      - description: Cat info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/mission.AssignCatRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Mission'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Assign cat to mission
      tags:
      - missions
  /missions/{id}/complete:
    post:
      description: Mark mission as complete if all targets are completed
      parameters:
      - description: Mission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Mission'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Mark mission as complete
      tags:
      - missions
  /missions/{id}/targets:
    post:
      consumes:
      - application/json
      description: Add a new target to an existing mission
      parameters:
      - description: Mission ID
        in: path
        name: id
        required: true
        type: integer
      - description: Target info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Target'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Target'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Add target to mission
      tags:
      - targets
  /missions/{id}/targets/{tid}:
    delete:
      description: Delete a target from mission
      parameters:
      - description: Mission ID
        in: path
        name: id
        required: true
        type: integer
      - description: Target ID
        in: path
        name: tid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete target
      tags:
      - targets
  /missions/{id}/targets/{tid}/complete:
    post:
      description: Mark a specific target as completed
      parameters:
      - description: Mission ID
        in: path
        name: id
        required: true
        type: integer
      - description: Target ID
        in: path
        name: tid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Target'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Mark target as complete
      tags:
      - targets
  /missions/{id}/targets/{tid}/notes:
    patch:
      consumes:
      - application/json
      description: Update notes for a specific target
      parameters:
      - description: Mission ID
        in: path
        name: id
        required: true
        type: integer
      - description: Target ID
        in: path
        name: tid
        required: true
        type: integer
      - description: Target notes
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/target.UpdateNotesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Target'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update target notes
      tags:
      - targets
  /stats/dashboard:
    get:
      consumes:
      - application/json
      description: Get comprehensive dashboard statistics including cats, missions,
        and targets data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.DashboardStats'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get dashboard statistics
      tags:
      - stats
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
